-----------------------iShadow Interface / Utility Scripts---------------------

These scripts are for pulling data off of the glasses and doing a couple of other useful tasks. This readme describes the proper use of these scripts and their input arguments.

-------------------------------build_param_file.py-----------------------------

This script is for generating a binary file to be uploaded into the glasses firmware. This file always includes one or more FPN masks, and optionally includes model parameters for the eye tracking algorithms.

INPUT ARGUMENTS:
-output-file [FILE_PREFIX]: Prefix for output file name. The file name will be appended with the number of pixels included in the ANN mask (0 if no model parameters are included).

-fpn-folder: Folder containing one or more FPN masks. Only files following the naming convention X_Y_fpn.pi will be read, where X is either "eye" or "out" and Y is either "row" or "col". The FPN mask generation script will follow this convention, so everything should work fine if you haven't changed the filenames.

-model-folder: Folder containing the parameters for the ANN model (needed for both CIDER and plain ANN eye tracking models). In the directory structure that is created by the ANN trainer, this will be something of the form [data_name]/models/lambda_[bunch of stuff]/repX/. Only include this option if you want to run an eye tracking model.


-------------------------------unpack_images.py--------------------------------
TODO: Clean up these arguments


--------------------------------unpack_mask.py---------------------------------
TODO: Add flags for automatically extracing masks generated by firmware flags


---------------------------------usb_image.py----------------------------------

Use this to read data from the glasses via USB. So long as the glasses are powered and configured to USB mode you should be able to run this to see a video stream. The connection may occasionally die, in which case you just need to power-cycle the glasses and run the script again.

***IMPORTANT***: There is currently no way to save the image stream when using USB, as that would slow down the transmission speed dramatically because saving to a file is stupidly slow in matplotlib for some reason. If you want to save a single image, see the --debug-folder option below.

INPUT ARGUMENTS:
-debug-folder [FOLDER_NAME]: Dumps the raw pixel values as well as the image PNG into a folder with the given name, overwriting a previous one if it exists already. This is used for debugging problems with USB communication or if you want to a record a single image from the USB.

-mask [MASK_FILENAME]: Uses the specified FPN mask to clean up a video stream that contains fixed-pattern-noise. This is *not* necessary if you have loaded a mask into the firmware.

-gen-mask [MASK_FILENAME]: Generates a new 8-bit mask file for cleaning up an image stream that contains fixed-pattern-noise. See the repo's primary readme for instructions on how to generate a pixel mask. This is *not* necessary if you have loaded a mask into the firmware.

-noflip: The image is usually reoriented to be sensible, this option shows it as comes from the camera. Used for debug purposes.

-columnwise: TODO: FIXME

-norender: By default, if the glasses are sending eye tracking data, the script will render the output. This option disables that rendering in case you just want to look at the video stream with nothing overlaid on top of it.



-----------------------------run_eye_exper.py----------------------------------

This script creates a screen with a moving circle. It is intended for use while generating training data of a person's eye movements for the ANN. See the repo's primary readme on instructions for that process.

TODO: Flesh the arguments out a little, add window size